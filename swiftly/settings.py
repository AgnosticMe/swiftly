"""
Django settings for swiftly project.

Generated by 'django-admin startproject' using Django 3.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from calendar import c
from os import lockf
from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = ['*',]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # project apps
    # 'src', commented as using apps.py
    'src.apps.SrcConfig',

    # 3rd party apps
    'bootstrap4',
    'social_django', # social media login feature
    'sslserver', # SSL-enabled development server for the Django Framework
    'django_cleanup.apps.CleanupConfig', # cleaning up the user uploaded media files
    'channels', # for real time maps tracking
    
    'storages', 
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'src.middleware.ProfileMiddleware',
]

ROOT_URLCONF = 'swiftly.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'social_django.context_processors.backends',
                'social_django.context_processors.login_redirect',

                # custom context processors
                'src.context_processors.firebase_info',
            ],
        },
    },
]

WSGI_APPLICATION = 'swiftly.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = config("LANGUAGE_CODE")

TIME_ZONE = config("TIME_ZONE")

USE_I18N = config("USE_I18N", cast=bool)

USE_L10N = config("USE_L10N", cast=bool)

USE_TZ = config("USE_TZ", cast=bool)


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

# STATIC_URL = '/static/'
# STATIC_ROOT = BASE_DIR / 'staticfiles'


# Media files(Images, audios, videos) uploaded by users


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# login redirect url
LOGIN_URL = '/sign-in'
LOGIN_REDIRECT_URL = '/'

# social login django 
AUTHENTICATION_BACKENDS = (
    'social_core.backends.facebook.FacebookOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)

SOCIAL_AUTH_FACEBOOK_KEY = config('SOCIAL_AUTH_FACEBOOK_KEY')
SOCIAL_AUTH_FACEBOOK_SECRET = config('SOCIAL_AUTH_FACEBOOK_SECRET')
SOCIAL_AUTH_FACEBOOK_SCOPE = ['email']
SOCIAL_AUTH_FACEBOOK_PROFILE_EXTRA_PARAMS = {
    'fields': 'id, name, email'
}


# configuring SMTP
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config("EMAIL_HOST")
EMAIL_PORT = config("EMAIL_PORT", default=25, cast=int)
EMAIL_HOST_USER = config("EMAIL_HOST_USER", default='localhost')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')
EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool)
DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL')

# configuring firebase
FIREBASE_API_KEY = config('FIREBASE_API_KEY')
FIREBASE_AUTH_DOMAIN = config('FIREBASE_AUTH_DOMAIN')
FIREBASE_PROJECT_ID = config('FIREBASE_PROJECT_ID')
FIREBASE_STORAGE_BUCKET = config('FIREBASE_STORAGE_BUCKET')
FIREBASE_MESSAGING_SENDER_ID = config('FIREBASE_MESSAGING_SENDER_ID')
FIREBASE_APP_ID = config('FIREBASE_APP_ID')

FIREBASE_TYPE = config('FIREBASE_TYPE').replace('\\n', '\n')
FIREBASE_PRIVATE_KEY_ID = config('FIREBASE_PRIVATE_KEY_ID').replace('\\n', '\n')
FIREBASE_PRIVATE_KEY = config('FIREBASE_PRIVATE_KEY').replace('\\n', '\n')
FIREBASE_CLIENT_EMAIL = config('FIREBASE_CLIENT_EMAIL').replace('\\n', '\n')
FIREBASE_CLIENT_ID = config('FIREBASE_CLIENT_ID').replace('\\n', '\n')
FIREBASE_AUTH_URI = config('FIREBASE_AUTH_URI').replace('\\n', '\n')
FIREBASE_TOKEN_URI = config('FIREBASE_TOKEN_URI').replace('\\n', '\n')
FIREBASE_AUTH_PROVIDER_X509_CERT_URL = config('FIREBASE_AUTH_PROVIDER_X509_CERT_URL').replace('\\n', '\n')
FIREBASE_CLIENT_X509_CERT_URL = config('FIREBASE_CLIENT_X509_CERT_URL').replace('\\n', '\n')

#  Stripe Cnfiguration
STRIPE_API_PUBLIC_KEY = config('STRIPE_API_PUBLIC_KEY')
STRIPE_API_SECRET_KEY = config('STRIPE_API_SECRET_KEY')

# Google Cloud API key
GOOGLE_API_KEY = config('GOOGLE_API_KEY')

# Paypal Configuration
PAYPAL_MODE = config('PAYPAL_MODE')
PAYPAL_CLIENT_ID = config('PAYPAL_CLIENT_ID')
PAYPAL_CLIENT_SECRET = config('PAYPAL_CLIENT_SECRET')

# Notification setup
NOTIFICATION_URL = "https://swiftly-quick-delivery-system.herokuapp.com/" 

# django channels setup 
ASGI_APPLICATION = "swiftly.asgi.application"

# Redis Configuration
REDIS_URI = config('REDIS_URI')
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [REDIS_URI],
        },
    },
}

# Activate Django Heroku
import django_on_heroku
django_on_heroku.settings(locals())

# Configurign s3 buckets to host media files

AWS_ACCESS_KEY_ID = config('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = config('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')
AWS_S3_FILE_OVERWRITE = config('AWS_S3_FILE_OVERWRITE')
AWS_DEFAULT_ACL = config('AWS_DEFAULT_ACL')
AWS_S3_REGION_NAME = 'us-west-2'
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
AWS_LOCATION = 'static'
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}

# Static files (CSS, JavaScript, Images)
STATICFILES_DIRS = [
    'src/static' 
]
STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/'
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# Media files(Images, audios, videos) uploaded by users
DEFAULT_FILE_STORAGE = 'swiftly.media_storages.MediaStorage'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


